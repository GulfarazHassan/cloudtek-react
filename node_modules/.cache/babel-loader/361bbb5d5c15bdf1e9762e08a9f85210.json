{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_HOST } from './constants';\n\nconst useFetch = urlPath => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [err, setErr] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    madeRequest();\n  }, []);\n\n  const madeRequest = () => {\n    setLoading(true);\n    axios.get(urlPath, {\n      baseURL: `http://${API_HOST}/api`,\n      headers: {\n        'x-rapidapi-host': API_HOST\n      }\n    }).then(res => setData(res.data.data)).catch(e => setErr(e.message)).finally(() => setLoading(false));\n  };\n\n  return {\n    data,\n    error: err,\n    showLoading: loading,\n    getItems: madeRequest\n  };\n};\n\n_s(useFetch, \"5st/qa95IWunlZNEbwAcen3SRLM=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/faraz/Desktop/Work/cloudtechTest/client/src/hooks/useFetch/index.ts"],"names":["useState","useEffect","axios","API_HOST","useFetch","urlPath","data","setData","err","setErr","loading","setLoading","madeRequest","get","baseURL","headers","then","res","catch","e","message","finally","error","showLoading","getItems"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAUA,MAAMC,QAAQ,GAAIC,OAAD,IAA+B;AAAA;;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAa,EAAb,CAAhC;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAS,EAAT,CAA9B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAU,KAAV,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,WAAW,GAAG,MAAM;AACxBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAT,IAAAA,KAAK,CACFW,GADH,CACOR,OADP,EACgB;AACZS,MAAAA,OAAO,EAAG,UAASX,QAAS,MADhB;AAEZY,MAAAA,OAAO,EAAE;AACP,2BAAmBZ;AADZ;AAFG,KADhB,EAOGa,IAPH,CAOSC,GAAD,IAASV,OAAO,CAACU,GAAG,CAACX,IAAJ,CAASA,IAAV,CAPxB,EAQGY,KARH,CAQUC,CAAD,IAAOV,MAAM,CAACU,CAAC,CAACC,OAAH,CARtB,EASGC,OATH,CASW,MAAMV,UAAU,CAAC,KAAD,CAT3B;AAUD,GAZD;;AAcA,SAAO;AACLL,IAAAA,IADK;AAELgB,IAAAA,KAAK,EAAEd,GAFF;AAGLe,IAAAA,WAAW,EAAEb,OAHR;AAILc,IAAAA,QAAQ,EAAEZ;AAJL,GAAP;AAMD,CA7BD;;GAAMR,Q;;AA+BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_HOST } from './constants';\nimport { ItemType } from '../../types/item.type';\n\ntype Response = {\n  data: any;\n  error: string;\n  showLoading: boolean;\n  getItems: () => void;\n};\n\nconst useFetch = (urlPath: string): Response => {\n  const [data, setData] = useState<ItemType[]>([]);\n  const [err, setErr] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    madeRequest();\n  }, []);\n\n  const madeRequest = () => {\n    setLoading(true);\n    axios\n      .get(urlPath, {\n        baseURL: `http://${API_HOST}/api`,\n        headers: {\n          'x-rapidapi-host': API_HOST,\n        },\n      })\n      .then((res) => setData(res.data.data))\n      .catch((e) => setErr(e.message))\n      .finally(() => setLoading(false));\n  };\n\n  return {\n    data,\n    error: err,\n    showLoading: loading,\n    getItems: madeRequest,\n  };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}